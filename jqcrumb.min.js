/*
* @author Matthew Martin
*
* Version 1.0
*
* Usage: $("#breadcrumbContainer").breadcrumb({ options });
* Options:
*          Name            Data Type   Description
* -----------------------------------------------------------------------------------------------------
*          levels          int         Total number of elements to display.
*          showHome        bool        If true, will always display "home" as the first element. This does not count as a level for the option above.
*          homeUrl         string      The url that clicking on home will redirect to.
*          homeCssClass    string      The class to apply to the home breadcrumb.
*          homeText        string      The text displayed on the home breadcrumb.
*          titleElement    string      The class or id name of the element used to drive the title. 
*                                      If provided, the breadcrumb will look for this element's "title" attribute.
*          storageKey      string      The key jStorage will use to store and retrieve saved breadcrumbs.
*          animateCrumbs   string      Whether or not to animate (slide out) the crumbs after they're loaded.
*          easing          string      Defines the easing for the animation. jQuery easing plugin required.
*                                      e.g. "easeOutElastic", "easeOutBounce", "swing"
*/

(function ($) { var _options = {}; var _container = {}; $.fn.breadcrumb = function (options) { _options = $.extend({ levels: 2, showHome: false, homeUrl: '', homeCssClass: 'homeBreadcrumb', homeText: 'Home', titleElement: '#breadcrumb_title', storageKey: 'breadcrumb_trail', animateCrumbs: true, easing: 'swing' }, options); return this.each(function () { _container = $(this); configureBreadcrumb(); }); }; function configureBreadcrumb() { var pageUrl = $(location).attr('href'); var breadcrumbObject = new Object(); breadcrumbObject.url = pageUrl; breadcrumbObject.title = parseBreadcrumbTitle(pageUrl); var crumbArray = $.jStorage.get(_options.storageKey); if (crumbArray == null) { crumbArray = new Array(); crumbArray[0] = breadcrumbObject; } else { var lastCrumb = crumbArray[crumbArray.length - 1]; if (lastCrumb.url != breadcrumbObject.url) crumbArray.push(breadcrumbObject); } $.jStorage.set(_options.storageKey, crumbArray); _container.append("<ul></ul>"); var ul = _container.find("ul"); if (_options.showHome) { ul.append("<li style='display: none' class='" + _options.homeCssClass + "'><a href='" + _options.homeUrl + "'>" + _options.homeText + "</a><div class='carat'></li>"); } for (var x = (crumbArray.length - _options.levels), c; c = crumbArray[x]; x++) { ul.append("<li style='display: none'><a href='" + c.url + "'>" + c.title + "</a><div class='carat'></div></li>"); } if (_options.animateCrumbs) { if (_options.easing) { ul.find('li').animate({ width: 'toggle' }, { easing: _options.easing }); } else { ul.find('li').animate({ width: 'toggle' }); } } else { ul.find('li').css("display", "block"); } } function parseBreadcrumbTitle(pageUrl) { var titleObject = $(_options.titleElement); var crumbTitle; if (titleObject.length > 0 && titleObject.attr("title")) { crumbTitle = titleObject.attr("title"); } else { crumbTitle = pageUrl.replace(/^.*\/|\.[^.]*$/g, ''); if (crumbTitle.indexOf("?") > 0) crumbTitle = crumbTitle.split('?')[0]; if (crumbTitle.indexOf("?") == 0) { crumbTitle = document.title; } if (isGuid(crumbTitle) || isInt(crumbTitle)) { var viewTitle = pageUrl.split('/'); crumbTitle = viewTitle[viewTitle.length - 2]; } } return crumbTitle.replace(/([a-z])([A-Z])/g, '$1 $2'); } function isGuid(g) { var regex = new RegExp("^(\{{0,1}([0-9a-fA-F]){8}-([0-9a-fA-F]){4}-([0-9a-fA-F]){4}-([0-9a-fA-F]){4}-([0-9a-fA-F]){12}\}{0,1})$"); return regex.test(g); } function isInt(n) { return typeof n == 'number'; } })(jQuery);